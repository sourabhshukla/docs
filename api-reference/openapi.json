{
  "openapi": "3.0.1",
  "info": {
    "title": "CTWA Documentation",
    "description": "CTWA Documentation",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://backend.aisensy.com/client/t1"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/meta-ads/fb-connect": {
      "post": {
        "description": "Connect a Facebook account to an assistant, retrieve business/pages/ad accounts, and store tokens",
        "requestBody": {
          "description": "Provide the assistant ID and Facebook auth response (access token, user ID, scopes, etc.)",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["assistantId", "authResponse", "status"],
                "properties": {
                  "assistantId": {
                    "type": "string",
                    "description": "ID of the assistant"
                  },
                  "authResponse": {
                    "type": "object",
                    "description": "Object containing Facebook auth data (accessToken, userID, grantedScopes)",
                    "properties": {
                      "accessToken": { "type": "string" },
                      "userID": { "type": "string" },
                      "grantedScopes": {
                        "type": "array",
                        "items": { "type": "string" }
                      }
                    }
                  },
                  "status": {
                    "type": "string",
                    "description": "Connection status returned by Facebook (e.g., 'connected')"
                  },
                  "debug": {
                    "type": "boolean",
                    "description": "Optional flag for debugging (default false)"
                  },
                  "partnerId": {
                    "type": "string",
                    "description": "Optional ID of a partner application (if relevant)"
                  },
                  "agentId": {
                    "type": "string",
                    "description": "Optional ID of the agent connecting the account"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully connected the Facebook account and synchronized the data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates successful connection"
                    },
                    "assistantData": {
                      "$ref": "#/components/schemas/assistantData",
                      "description": "Assistant record reflecting the connected FB account"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters or insufficient FB permissions granted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error name/code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Explanation of the invalid request or missing permission"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Facebook sign-up failure (for example, missing or invalid FB access token)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error name/code (e.g., 'ERR401')"
                    },
                    "message": {
                      "type": "string",
                      "description": "Explanation of the failed FB sign-up"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error while attempting to connect to Facebook",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message indicating a server-side or FB API error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/fb-disconnect": {
      "post": {
        "description": "Disconnect a Facebook account from an assistant, revoke ad account permissions, and mark associated pages and ad accounts as deleted/unassigned.",
        "requestBody": {
          "description": "Provide the assistant ID and Facebook user ID to disconnect FB access",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["assistantId", "fbUserId"],
                "properties": {
                  "assistantId": {
                    "type": "string",
                    "description": "The ID of the assistant whose FB connection is being removed"
                  },
                  "fbUserId": {
                    "type": "string",
                    "description": "The Facebook user ID that was connected to the assistant"
                  },
                  "partnerId": {
                    "type": "string",
                    "description": "Partner ID if any, used for removing partner-level permissions (optional)"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully disconnected the Facebook account and removed ad account/page permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates whether the disconnect operation was successful"
                    },
                    "assistantData": {
                      "$ref": "#/components/schemas/assistantData",
                      "description": "Updated assistant record reflecting the FB disconnection"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Missing or invalid parameters, or user is not allowed to disconnect",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error code/name (e.g., 'ERR400')"
                    },
                    "message": {
                      "type": "string",
                      "description": "Reason the request failed"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error or Facebook-related error when removing permissions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message explaining why the disconnect operation could not be completed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/sync-meta-ad-account": {
      "post": {
        "description": "Synchronize Meta ad account data and its associated ads with local records",
        "requestBody": {
          "description": "Provide the assistant ID and ad account ID to synchronize data",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["assistantId", "adAccountId"],
                "properties": {
                  "assistantId": {
                    "type": "string",
                    "description": "The ID of the assistant"
                  },
                  "adAccountId": {
                    "type": "string",
                    "description": "The ID of the Meta ad account to be synchronized"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ad account and associated ads synchronized successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "adAccountData": {
                      "$ref": "#/components/schemas/adAccount",
                      "description": "Updated ad account details (token fields removed)"
                    },
                    "message": {
                      "type": "string",
                      "description": "Confirmation message indicating the synchronization result"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error code/name"
                    },
                    "message": {
                      "type": "string",
                      "description": "Details about what caused the request to fail"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Ad account not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error code/name (e.g., 'ERR404')"
                    },
                    "message": {
                      "type": "string",
                      "description": "Explanation of the missing resource"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error or Facebook API error during synchronization",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "High-level error message indicating why the sync failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/fetch-ad-accounts": {
      "post": {
        "description": "Fetch ad accounts associated with a given assistant",
        "requestBody": {
          "description": "Provide the assistant ID to retrieve all relevant ad accounts",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["assistantId"],
                "properties": {
                  "assistantId": {
                    "type": "string",
                    "description": "The ID of the assistant whose ad accounts should be fetched"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ad accounts fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/adAccount"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Assistant ID missing or invalid request body",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error code/name"
                    },
                    "message": {
                      "type": "string",
                      "description": "Reason for invalid request"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error while fetching ad accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "description": "Message indicating the reason for the failure"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/fetch-ad-account": {
      "post": {
        "description": "Fetch ad account details for a specified assistant",
        "requestBody": {
          "description": "Provide the ad account ID and the assistant ID",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["adAccountId", "assistantId"],
                "properties": {
                  "adAccountId": {
                    "type": "string",
                    "description": "The ID of the Meta ad account"
                  },
                  "assistantId": {
                    "type": "string",
                    "description": "The ID of the assistant associated with the ad account"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully fetched the ad account details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adAccount"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error code/name"
                    },
                    "message": {
                      "type": "string",
                      "description": "Details about the invalid request"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error while fetching ad account details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "description": "Error message explaining why the fetch failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/sync-ad": {
      "post": {
        "description": "Synchronize local ad data with Meta's latest ad information",
        "requestBody": {
          "description": "Provide the assistant ID and the MongoDB ad ID to update an existing ad",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["assistantId", "_id"],
                "properties": {
                  "assistantId": {
                    "type": "string",
                    "description": "The ID of the assistant"
                  },
                  "_id": {
                    "type": "string",
                    "description": "The MongoDB ID of the ad record being synchronized"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ad synchronization completed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "adData": {
                      "$ref": "#/components/schemas/adData",
                      "description": "The updated local ad record"
                    },
                    "adAccountData": {
                      "$ref": "#/components/schemas/adAccount",
                      "description": "Updated ad account details without system user tokens"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters provided",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error code/name"
                    },
                    "message": {
                      "type": "string",
                      "description": "Details about the invalid parameters"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Ad or Ad Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error code/name (e.g., 'ERR404')"
                    },
                    "message": {
                      "type": "string",
                      "description": "Details on the missing resource"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error or Facebook API issue while syncing ads",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "High-level message indicating the failure reason"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/fetch-ads/{adAccountId}": {
      "post": {
        "description": "Fetch a list of ads from a specified ad account, filtered and paginated as requested",
        "parameters": [
          {
            "in": "path",
            "name": "adAccountId",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "The ID of the Meta ad account for which ads are being fetched"
          }
        ],
        "requestBody": {
          "description": "Provide the assistant ID, pagination options, name filtering, and optional tab or status filters",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["assistantId"],
                "properties": {
                  "assistantId": {
                    "type": "string",
                    "description": "ID of the assistant that owns the ads"
                  },
                  "limit": {
                    "type": "integer",
                    "description": "Number of ads to fetch per page (default 10)"
                  },
                  "page": {
                    "type": "integer",
                    "description": "Zero-based or one-based page index (default 1); used with limit to paginate ads"
                  },
                  "nameQuery": {
                    "type": "string",
                    "description": "Search query to match ads by name (case-insensitive)"
                  },
                  "tab": {
                    "type": "string",
                    "description": "Optional tab or category for UI-based filtering"
                  },
                  "selectedOption": {
                    "type": "string",
                    "description": "Comma-separated list of ad statuses to include (e.g. 'ACTIVE,PAUSED')"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ads fetched successfully with applied filters and pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "mongoData": {
                      "type": "array",
                      "description": "An array of matched ads",
                      "items": {
                        "$ref": "#/components/schemas/adData"
                      }
                    },
                    "count": {
                      "type": "number",
                      "description": "Total number of ads matching the query"
                    },
                    "activeAdCount": {
                      "type": "number",
                      "description": "Number of ads with status = 'ACTIVE'"
                    },
                    "pausedAdCount": {
                      "type": "number",
                      "description": "Number of ads with status = 'PAUSED'"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing parameters, or the user cannot access the requested ad account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error name/code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Detailed error message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error or inability to fetch ads from the database",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "description": "Error message indicating why the server failed to retrieve ads"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/fetch-ads": {
      "post": {
        "description": "Fetch multiple ads for a given assistant",
        "requestBody": {
          "description": "Provide the assistant ID to retrieve ads from the system",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["assistantId"],
                "properties": {
                  "assistantId": {
                    "type": "string",
                    "description": "ID of the assistant"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ads fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/adData"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters or other client error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error code/name"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unable to connect to Facebook or another server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "description": "Server error message indicating the failure reason"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/fetch-ad": {
      "post": {
        "description": "Fetches a specific ad based on its MongoDB ID and assistant ID",
        "requestBody": {
          "description": "Provide the MongoDB ad ID and the assistant ID",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["_id", "assistantId"],
                "properties": {
                  "_id": {
                    "type": "string",
                    "description": "The MongoDB ID of the ad"
                  },
                  "assistantId": {
                    "type": "string",
                    "description": "The ID of the assistant that owns the ad"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved the requested ad",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing parameters, or the ad was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error code/name"
                    },
                    "message": {
                      "type": "string",
                      "description": "Details about the reason the ad wasn't found or the invalid parameters"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error while trying to fetch the ad",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "description": "Description of the internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/create-ad": {
      "post": {
        "description": "Create a new ad or update an existing ad based on the provided parameters",
        "requestBody": {
          "description": "Provide the assistant ID and an optional Mongo ad ID to create/update an ad",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["assistantId", "_id"],
                "properties": {
                  "assistantId": {
                    "type": "string",
                    "description": "The ID of the assistant associated with the ad"
                  },
                  "_id": {
                    "type": "string",
                    "description": "The MongoDB ad ID. If it exists, the ad will be updated; otherwise a new ad is created."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ad created/updated and returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid or missing parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Detailed error message explaining what went wrong"
                    },
                    "name": {
                      "type": "string",
                      "description": "Error code/name"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Unable to connect to Facebook or other server-side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "description": "Description of the server or Facebook API error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/fetch-ctw-ads": {
      "post": {
        "description": "Fetch Click-to-WhatsApp (CTW) ads from a specified ad account and update local records",
        "requestBody": {
          "description": "Provide the assistant ID and ad account ID to retrieve/update CTW ads",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["assistantId", "adAccountId"],
                "properties": {
                  "assistantId": {
                    "type": "string",
                    "description": "ID of the assistant"
                  },
                  "adAccountId": {
                    "type": "string",
                    "description": "ID of the ad account from which CTW ads are fetched"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "CTW ads fetched and synchronized successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "adsCreated": {
                      "type": "integer",
                      "description": "Number of new ad records created"
                    },
                    "adsUpdated": {
                      "type": "integer",
                      "description": "Number of existing ad records updated"
                    },
                    "matchedCount": {
                      "type": "integer",
                      "description": "Number of matched records (for updates)"
                    },
                    "adAccountData": {
                      "$ref": "#/components/schemas/adAccount",
                      "description": "Updated ad account details, excluding system user tokens"
                    },
                    "message": {
                      "type": "string",
                      "description": "Confirmation message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error name/code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Details about the error"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Ad account not found or not assigned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error code/name (e.g. 'ERR404')"
                    },
                    "message": {
                      "type": "string",
                      "description": "Explanation of the missing resource"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error while fetching ads",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the failure"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/new-fetch-ctw-ads": {
      "post": {
        "description": "Fetch new Click-to-WhatsApp (CTW) ads from a 2-tier ad account",
        "requestBody": {
          "description": "Provide assistant ID and ad account ID to retrieve CTW ads",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["assistantId", "adAccountId"],
                "properties": {
                  "assistantId": {
                    "type": "string",
                    "description": "ID of the assistant"
                  },
                  "adAccountId": {
                    "type": "string",
                    "description": "ID of the ad account from which ads are fetched"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "CTW ads fetched and synchronized successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Confirmation message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters or ad account mismatch",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error name/code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Detailed error message explaining why the request failed"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found (e.g., ad account not assigned)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error name/code (e.g. 'ERR404')"
                    },
                    "message": {
                      "type": "string",
                      "description": "Details about the missing resource"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error while fetching ads",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message indicating reason for the failure"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/update-ad-status": {
      "post": {
        "description": "Update the status of an existing Meta ad",
        "requestBody": {
          "description": "Provide details (ad ID, ad account ID, assistant ID, new status) to update an ad's status",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "_id",
                  "adAccountId",
                  "adId",
                  "assistantId",
                  "status"
                ],
                "properties": {
                  "_id": {
                    "type": "string",
                    "description": "Internal MongoDB ID for the ad record"
                  },
                  "adAccountId": {
                    "type": "string",
                    "description": "ID of the Meta ad account containing the ad"
                  },
                  "adId": {
                    "type": "string",
                    "description": "Meta-provided ID of the ad to be updated"
                  },
                  "assistantId": {
                    "type": "string",
                    "description": "ID of the assistant that owns the ad"
                  },
                  "status": {
                    "type": "string",
                    "description": "New status for the ad (e.g. 'ACTIVE', 'PAUSED')"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated the ad status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error code/name"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the error"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found or insufficient credits",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error name (e.g. 'ERR404')"
                    },
                    "message": {
                      "type": "string",
                      "description": "Description of the missing resource or credit issue"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error during ad status update",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message indicating the update process failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/location-search": {
      "post": {
        "description": "Search for advanced location targeting data (cities, regions, neighborhoods, etc.)",
        "requestBody": {
          "description": "Provide an ad account ID, assistant ID, and search text to look up location data",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["adAccountId", "assistantId", "text"],
                "properties": {
                  "adAccountId": {
                    "type": "string",
                    "description": "ID of the ad account performing the search"
                  },
                  "assistantId": {
                    "type": "string",
                    "description": "ID of the assistant requesting the search"
                  },
                  "text": {
                    "type": "string",
                    "description": "Location search text (e.g., 'Bangalore', 'Indiana')"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Locations retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "description": "Array of matching location results",
                      "items": {
                        "$ref": "#/components/schemas/adGeoLocation"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error name/code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Detailed error message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error while searching locations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Explanation of the server-side error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/target-suggestions": {
      "post": {
        "description": "Retrieve targeting suggestions based on a list of targeting options",
        "requestBody": {
          "description": "Provide the assistant ID and a list of targeting options to receive suggestions",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["assistantId", "targetList"],
                "properties": {
                  "assistantId": {
                    "type": "string",
                    "description": "The ID of the assistant requesting suggestions"
                  },
                  "targetList": {
                    "type": "string",
                    "description": "A serialized list of targeting items (JSON/string) for which suggestions are requested"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Target suggestions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "description": "An array of suggested targeting items",
                      "items": {
                        "$ref": "#/components/schemas/targetingSearchItem"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error name/code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Detailed error message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error while retrieving target suggestions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Explanation of the server-side error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/target-search": {
      "post": {
        "description": "Search location or advanced targeting interests/behaviors via Meta's targetingsearch endpoint",
        "requestBody": {
          "description": "Provide an assistant ID and search text to query Meta's targeting database",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["assistantId", "text"],
                "properties": {
                  "assistantId": {
                    "type": "string",
                    "description": "The ID of the assistant performing the search"
                  },
                  "text": {
                    "type": "string",
                    "description": "Search text or query for targeting (e.g., 'high school', 'college')"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Search results retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "description": "An array of matching targeting items from Meta",
                      "items": {
                        "$ref": "#/components/schemas/targetingSearchItem"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters or other client-side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error name/code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message explaining what went wrong"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error, unable to search target data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message detailing the server-side issue"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/fetch-ad-analytics": {
      "post": {
        "description": "Fetch paginated ad analytics records for a specific ad within a date range",
        "requestBody": {
          "description": "Provide ad ID, assistant ID, pagination details, and optional filters",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["adId", "assistantId", "limit", "page"],
                "properties": {
                  "adId": {
                    "type": "string",
                    "description": "The ID of the ad for which analytics are being fetched"
                  },
                  "assistantId": {
                    "type": "string",
                    "description": "The ID of the assistant that owns the ad"
                  },
                  "limit": {
                    "type": "integer",
                    "description": "The number of records to fetch per page"
                  },
                  "page": {
                    "type": "integer",
                    "description": "The page index for pagination (zero-based)"
                  },
                  "leadType": {
                    "type": "string",
                    "description": "Optional filter for the type of leads (e.g., 'new' or 'existing')"
                  },
                  "startDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Optional start date for filtering records by 'sentAt'"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Optional end date for filtering records by 'sentAt'"
                  },
                  "sort": {
                    "type": "integer",
                    "description": "Sort order for 'sentAt' field. Typically -1 (descending) or 1 (ascending)."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ad Analytics fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "mongoAdAnalyticsData": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/metaAdAnalytics"
                      },
                      "description": "An array of analytics documents"
                    },
                    "count": {
                      "type": "number",
                      "description": "Total number of records matching the query"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error code/name"
                    },
                    "message": {
                      "type": "string",
                      "description": "Detailed error message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error while fetching ad analytics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "description": "Error message indicating reason for failure"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/opt-meta-audience-count": {
      "post": {
        "description": "Determine how many users in a given Meta ad audience have opted out",
        "requestBody": {
          "description": "Filter by ad ID, assistant ID, date range, and optional lead type",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["adId", "assistantId"],
                "properties": {
                  "adId": {
                    "type": "string",
                    "description": "ID of the ad from which the audience is derived"
                  },
                  "assistantId": {
                    "type": "string",
                    "description": "ID of the assistant for which audience data is being fetched"
                  },
                  "startDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Start date for filtering the audience data (optional)"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "End date for filtering the audience data (optional)"
                  },
                  "leadType": {
                    "type": "string",
                    "description": "Type of leads to filter (e.g. 'new', 'existing'; optional)"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved the count of opted-out audience members",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "optedCount": {
                      "type": "number",
                      "description": "Number of users who have opted out"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - invalid or missing parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error name/code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Detailed error message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - unable to process the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "description": "Error message for server-side failure"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/get-segregated-opted": {
      "post": {
        "description": "Determine how many users in the provided list are opted-out",
        "requestBody": {
          "description": "Check opted-out status for a list of user numbers",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["assistantId", "userNumberArray"],
                "properties": {
                  "assistantId": {
                    "type": "string",
                    "description": "The ID of the assistant"
                  },
                  "userNumberArray": {
                    "type": "array",
                    "description": "An array of user number objects to check",
                    "items": {
                      "type": "object",
                      "properties": {
                        "userNumber": {
                          "type": "string",
                          "description": "User's WhatsApp phone number"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved opted-out count",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "optedoutLenght": {
                      "type": "number",
                      "description": "Number of users who have opted out"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - invalid or missing parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error name/code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Detailed error message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - unable to process the request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "description": "Error message for server-side failure"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/fetch-ad-graph-data": {
      "post": {
        "description": "Fetches ad analytics data (e.g., leads/messages) within a specified date range",
        "requestBody": {
          "description": "Provide ad ID, assistant ID, and optionally start/end dates to filter analytics data",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["adId", "assistantId"],
                "properties": {
                  "adId": {
                    "type": "string",
                    "description": "The ID of the ad for which analytics are being fetched"
                  },
                  "assistantId": {
                    "type": "string",
                    "description": "The ID of the assistant that owns the ad"
                  },
                  "startDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Start of the date range (optional); defaults to current day start"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "End of the date range (optional); defaults to current day end"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ad analytics data fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/metaAdAnalytics"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid or missing parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error name/code"
                    },
                    "message": {
                      "type": "string",
                      "description": "Details about the error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error while fetching ad analytics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "description": "Error message indicating reason for failure"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/update-whatsapp-number": {
      "post": {
        "description": "Update or verify a WhatsApp number linked to a Meta page",
        "requestBody": {
          "description": "Verify OTP and link the WhatsApp number with the specified page",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["assistantId", "number", "pageId"],
                "properties": {
                  "assistantId": {
                    "type": "string",
                    "description": "The ID of the assistant"
                  },
                  "number": {
                    "type": "string",
                    "description": "The WhatsApp number to link with the page (E.164 format, e.g., '919642836392')"
                  },
                  "pageId": {
                    "type": "string",
                    "description": "Meta Page ID for which the WhatsApp number is being verified"
                  },
                  "verificationCode": {
                    "type": "string",
                    "description": "OTP verification code if the user is in the process of verifying the number",
                    "default": ""
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "WhatsApp number updated/verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "verification_status": {
                      "type": "string",
                      "description": "Verification status returned by the Meta API"
                    },
                    "otpState": {
                      "type": "string",
                      "description": "State of the OTP verification process (e.g. 'send', 'verified')"
                    },
                    "message": {
                      "type": "string",
                      "description": "Human-readable status message"
                    },
                    "pageData": {
                      "$ref": "#/components/schemas/metaPage",
                      "nullable": true,
                      "description": "Updated page document (only if verification_status implies a successful link)"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request or invalid OTP/parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "ERR404",
                      "description": "Error code/name"
                    },
                    "message": {
                      "type": "string",
                      "example": "Number is not linked with Whatsapp",
                      "description": "Details about the error"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error - cannot verify or link WhatsApp number",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Could not generate/verify OTP",
                      "description": "General server error message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/link-whatsapp-number-with-page": {
      "post": {
        "description": "Link a WhatsApp number with a Meta page, optionally setting up a child business account",
        "requestBody": {
          "description": "Verify OTP for the WhatsApp number and then link it with the specified page",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["assistantId", "number", "pageId"],
                "properties": {
                  "assistantId": {
                    "type": "string",
                    "description": "The ID of the assistant to which the WhatsApp number/page is linked"
                  },
                  "number": {
                    "type": "string",
                    "description": "The WhatsApp phone number to be linked with the page"
                  },
                  "pageId": {
                    "type": "string",
                    "description": "The Meta page ID to which the WhatsApp number is linked"
                  },
                  "verificationCode": {
                    "type": "string",
                    "description": "OTP verification code for the phone number (if applicable)",
                    "default": ""
                  },
                  "timezoneId": {
                    "type": "string",
                    "description": "Timezone ID used if a new child business manager is created"
                  },
                  "vertical": {
                    "type": "string",
                    "description": "Business vertical/category"
                  },
                  "bmName": {
                    "type": "string",
                    "description": "The name of the business manager account to create"
                  },
                  "createBM": {
                    "type": "boolean",
                    "description": "If true, a new child business manager will be created"
                  }
                },
                "example": {
                  "assistantId": "6740327c7efe1a58cc6e633e",
                  "number": "919642836392",
                  "pageId": "399277543277253",
                  "verificationCode": "123456",
                  "timezoneId": "Asia/Kolkata",
                  "vertical": "E-commerce",
                  "bmName": "MyNewBM",
                  "createBM": true
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "WhatsApp number successfully linked with the page",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "otpState": {
                      "type": "string",
                      "description": "Indicates whether the OTP was verified (e.g., 'verified', 'pending')"
                    },
                    "adAccount": {
                      "$ref": "#/components/schemas/adAccount",
                      "description": "Ad account details if a new child business manager is created"
                    },
                    "createdBM": {
                      "type": "boolean",
                      "description": "Indicates if a new child business manager was created"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - invalid parameters or OTP error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error name",
                      "example": "ERR400"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - could not generate or verify the OTP",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Reason for the failure",
                      "example": "Could not generate/verify OTP"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/fetch-pages": {
      "post": {
        "description": "Fetch all active Meta pages for a given assistant",
        "requestBody": {
          "description": "Retrieve pages associated with the specified assistant",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["assistantId"],
                "properties": {
                  "assistantId": {
                    "type": "string",
                    "description": "The ID of the assistant for which pages need to be fetched"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Pages fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/metaPage"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - invalid or missing parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "ERR400",
                      "description": "Error name"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid Parameters",
                      "description": "Detailed error message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error while fetching pages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "Unable to fetch pages",
                      "description": "Message describing why the request failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/fetch-page": {
      "post": {
        "description": "Fetch pages for a given assistant (optionally filtered by pageId).",
        "requestBody": {
          "description": "Fetch pages associated with the given assistant.",
          "content": {
            "application/json": {
              "schema": {
                "required": ["assistantId"],
                "type": "object",
                "properties": {
                  "assistantId": {
                    "type": "string",
                    "description": "The ID of the assistant."
                  },
                  "pageId": {
                    "type": "string",
                    "description": "Optional Meta page ID to filter the results."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Pages fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",

                  "$ref": "#/components/schemas/metaPage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request due to invalid or missing parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error name",
                      "example": "ERR400"
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong",
                      "example": "Invalid Parameters"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error while fetching pages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "description": "Error message indicating failure reason",
                      "example": "Unable to fetch page"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/select-ad-profile": {
      "post": {
        "description": "Select Page ID or Ad Account ID for an Assistant",
        "requestBody": {
          "description": "Choose a Meta page and/or ad account for the specified assistant",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["assistantId"],
                "properties": {
                  "assistantId": {
                    "type": "string",
                    "description": "The ID of the assistant being updated"
                  },
                  "selectedMetaPageId": {
                    "type": "string",
                    "description": "The ID of the selected Meta page (optional)"
                  },
                  "selectedMetaAdAccountId": {
                    "type": "string",
                    "description": "The ID of the selected Meta ad account (optional)"
                  }
                },
                "example": {
                  "assistantId": "6740327c7efe1a58cc6e633e",
                  "selectedMetaPageId": "399277543277253",
                  "selectedMetaAdAccountId": "act_8286720991411573"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Page or Ad Account selected successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assistantData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Invalid parameters or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "Error name",
                      "example": "ERR400"
                    },
                    "message": {
                      "type": "string",
                      "description": "Detailed error message",
                      "example": "Invalid Parameters"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Unable to update assistant",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "description": "Server error message",
                      "example": "Unable to update assistant"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/fetch-web-meta-data": {
      "post": {
        "description": "Fetch Web Meta Data",
        "requestBody": {
          "description": "Fetch raw HTML document of a webpage",
          "content": {
            "application/json": {
              "schema": {
                "required": ["assistantId", "link"],
                "type": "object",
                "properties": {
                  "assistantId": {
                    "type": "string",
                    "description": "The ID of the assistant making the request"
                  },
                  "link": {
                    "type": "string",
                    "description": "The URL of the webpage to fetch"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Webpage HTML fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "link": {
                      "type": "string",
                      "description": "The requested webpage URL"
                    },
                    "documentDOC": {
                      "type": "string",
                      "description": "Raw HTML content of the fetched webpage"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters or website not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "ERR400"
                    },
                    "message": {
                      "type": "string",
                      "example": "Website not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error when fetching the webpage",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "Unable to fetch website meta data"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/updateMetaAdDetails": {
      "post": {
        "description": "Update Meta Ad Details",
        "requestBody": {
          "description": "Update meta ad details including budget and other related fields",
          "content": {
            "application/json": {
              "schema": {
                "required": ["assistantId"],
                "type": "object",
                "properties": {
                  "assistantId": {
                    "type": "string",
                    "description": "The ID of the assistant associated with the ad"
                  },
                  "totalAssignedBudget": {
                    "type": "number",
                    "description": "The total budget assigned for the ad, must be at least 5000"
                  },
                  "metaAdsDetails": {
                    "type": "object",
                    "description": "An object containing meta ad details to be updated",
                    "additionalProperties": true
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Meta Ad Details Updated Successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assistantData"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message indicating what was invalid"
                    },
                    "name": {
                      "type": "string",
                      "description": "Error name"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "description": "Error message indicating why the update failed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/assign-meta-page": {
      "post": {
        "description": "Assign an existing Meta page to an assistant",
        "requestBody": {
          "description": "Assign an existing Meta Page to a specified assistant",
          "content": {
            "application/json": {
              "schema": {
                "required": ["assistantId", "id"],
                "type": "object",
                "properties": {
                  "assistantId": {
                    "type": "string",
                    "description": "The ID of the assistant to assign the page to"
                  },
                  "id": {
                    "type": "string",
                    "description": "The ID of the Meta page to be assigned"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Meta page assigned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true,
                      "description": "Indicates if the page was assigned successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/metaPage"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message detailing what went wrong"
                    },
                    "name": {
                      "type": "string",
                      "description": "Error name"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "description": "Error message indicating the failure reason"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/assign-ad-account": {
      "post": {
        "description": "Assign an existing ad account to an assistant",
        "requestBody": {
          "description": "Assign an existing Meta Ad Account to a specified assistant",
          "content": {
            "application/json": {
              "schema": {
                "required": ["assistantId", "id"],
                "type": "object",
                "properties": {
                  "assistantId": {
                    "type": "string",
                    "description": "The ID of the assistant to assign the ad account to"
                  },
                  "id": {
                    "type": "string",
                    "description": "The ID of the ad account to be assigned"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ad account assigned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true,
                      "description": "Indicates if the ad account was assigned successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/adAccount"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message detailing what went wrong"
                    },
                    "name": {
                      "type": "string",
                      "description": "Error name"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "description": "Error message indicating the failure reason"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/setup-business-account": {
      "post": {
        "description": "Setup a new business account for Meta Ads",
        "requestBody": {
          "description": "Setup a new Meta Ads business account with the given parameters",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "assistantId",
                  "pageId",
                  "timezoneId",
                  "vertical",
                  "bmName"
                ],
                "type": "object",
                "properties": {
                  "assistantId": {
                    "type": "string",
                    "description": "ID of the assistant"
                  },
                  "pageId": {
                    "type": "string",
                    "description": "Facebook page ID to be associated with the business account"
                  },
                  "timezoneId": {
                    "type": "string",
                    "description": "Timezone ID for the business account"
                  },
                  "vertical": {
                    "type": "string",
                    "description": "Business vertical/category"
                  },
                  "bmName": {
                    "type": "string",
                    "description": "Name of the business account"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Business account setup successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true,
                      "description": "Indicates whether the setup was successful"
                    },
                    "adAccount": {
                      "$ref": "#/components/schemas/adAccount"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong"
                    },
                    "name": {
                      "type": "string",
                      "description": "Error name"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "description": "Error message indicating the failure reason"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/fetch-meta-ad-setup": {
      "post": {
        "description": "Fetch Meta Ad Setup",
        "requestBody": {
          "description": "Fetch ad setup details for the specified ad",
          "content": {
            "application/json": {
              "schema": {
                "required": ["assistantId", "_id"],
                "type": "object",
                "properties": {
                  "assistantId": {
                    "type": "string",
                    "description": "Project ID for which the ad setup needs to be fetched"
                  },
                  "_id": {
                    "type": "string",
                    "description": "Mongo ID of the ad"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ad setup details fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "adAccountData": {
                      "$ref": "#/components/schemas/adAccount"
                    },
                    "adData": {
                      "$ref": "#/components/schemas/adData"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message describing what went wrong"
                    },
                    "name": {
                      "type": "string",
                      "description": "Error name"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "description": "Error message indicating the failure reason"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/create-meta-ad-account": {
      "post": {
        "description": "Create a new Meta ad account",
        "requestBody": {
          "description": "Details for creating a new ad account",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "childBusinessId",
                  "adAccountName",
                  "timezoneId",
                  "currency",
                  "assistantId"
                ],
                "type": "object",
                "properties": {
                  "childBusinessId": {
                    "type": "string",
                    "description": "ID of the child business associated with the ad account"
                  },
                  "adAccountName": {
                    "type": "string",
                    "description": "Name of the new ad account"
                  },
                  "timezoneId": {
                    "type": "string",
                    "description": "Timezone ID for the ad account"
                  },
                  "currency": {
                    "type": "string",
                    "description": "Currency code for the ad account"
                  },
                  "assistantId": {
                    "type": "string",
                    "description": "Assistant ID linked to the ad account"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ad account created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the ad account was created successfully"
                    },
                    "adAccount": {
                      "$ref": "#/components/schemas/adAccount"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to invalid input or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "description": "Error message describing the failure reason"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error while creating the ad account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "description": "Detailed server error message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/create-meta-ad-campaign": {
      "post": {
        "description": "Create a new Meta ad campaign",
        "requestBody": {
          "description": "Details for creating a new ad campaign",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "objective",
                  "status",
                  "adAccountId",
                  "assistantId"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the ad campaign"
                  },
                  "objective": {
                    "type": "string",
                    "description": "Objective of the ad campaign"
                  },
                  "status": {
                    "type": "string",
                    "description": "Status of the ad campaign"
                  },
                  "specialAdCategories": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Special categories for the ad campaign, if any"
                  },
                  "adAccountId": {
                    "type": "string",
                    "description": "Facebook ad account ID"
                  },
                  "assistantId": {
                    "type": "string",
                    "description": "Assistant ID associated with the ad campaign"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ad campaign created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates whether the operation was successful"
                    },
                    "adCampaign": {
                      "$ref": "#/components/schemas/adCampaign"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to invalid input or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "description": "Error message explaining the reason for the failure"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error during ad campaign creation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "description": "Detailed server error message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/fetch-meta-ad-campaign": {
      "post": {
        "description": "Fetches meta ad campaigns based on the provided criteria.",
        "requestBody": {
          "description": "Fetch meta ad campaigns.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["clientId", "adAccountId", "assistantId"],
                "properties": {
                  "clientId": {
                    "type": "string",
                    "description": "ID of the client."
                  },
                  "adAccountId": {
                    "type": "string",
                    "description": "ID of the ad account for which campaigns need to be fetched."
                  },
                  "assistantId": {
                    "type": "string",
                    "description": "ID of the assistant associated with the campaigns."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ad campaigns fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "campaigns": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/adCampaign"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to invalid or missing parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "Invalid parameters"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "Unable to fetch ad campaigns"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/fetch-meta-ad-set": {
      "post": {
        "description": "Fetches meta ad sets based on the provided criteria.",
        "requestBody": {
          "description": "Fetch meta ad sets.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["clientId", "adCampaignId", "assistantId"],
                "properties": {
                  "clientId": {
                    "type": "string",
                    "description": "ID of the client."
                  },
                  "adCampaignId": {
                    "type": "string",
                    "description": "ID of the ad campaign for which ad sets need to be fetched."
                  },
                  "assistantId": {
                    "type": "string",
                    "description": "ID of the assistant associated with the ad sets."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ad sets fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "adSet": {
                      "$ref": "#/components/schemas/adSet"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to invalid or missing parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "Invalid parameters"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "Unable to fetch ad sets"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/create-meta-ad-set": {
      "post": {
        "description": "Create a new Meta Ad Set",
        "requestBody": {
          "description": "Creates a new ad set with specified targeting and budget settings",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "name",
                  "optimizationGoal",
                  "billingEvent",
                  "dailyBudget",
                  "adCampaignId",
                  "targeting",
                  "startTime",
                  "status",
                  "assistantId",
                  "adAccountId"
                ],
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the ad set"
                  },
                  "optimizationGoal": {
                    "type": "string",
                    "description": "Optimization goal for the ad set"
                  },
                  "billingEvent": {
                    "type": "string",
                    "description": "Billing event type"
                  },
                  "bidAmount": {
                    "type": "number",
                    "description": "Bid amount for the ad set"
                  },
                  "dailyBudget": {
                    "type": "number",
                    "description": "Daily budget for the ad set"
                  },
                  "adCampaignId": {
                    "type": "string",
                    "description": "Campaign ID to associate with the ad set"
                  },
                  "targeting": {
                    "type": "object",
                    "description": "Targeting details for the ad set",
                    "properties": {
                      "age_min": {
                        "type": "integer",
                        "description": "Minimum age for targeting"
                      },
                      "age_max": {
                        "type": "integer",
                        "description": "Maximum age for targeting"
                      },
                      "genders": {
                        "type": "array",
                        "items": {
                          "type": "integer"
                        },
                        "description": "Gender targeting"
                      },
                      "geo_locations": {
                        "type": "object",
                        "description": "Geographical targeting details",
                        "properties": {
                          "countries": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "List of countries to target"
                          },
                          "cities": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": { "type": "string" },
                                "name": { "type": "string" }
                              }
                            },
                            "description": "List of cities to target"
                          },
                          "regions": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "description": "List of regions to target"
                          }
                        }
                      },
                      "flexible_spec": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "interests": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": { "type": "string" }
                                }
                              },
                              "description": "Interests targeting"
                            },
                            "work_employers": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "id": { "type": "string" }
                                }
                              },
                              "description": "Employer-based targeting"
                            }
                          }
                        },
                        "description": "Flexible targeting specifications"
                      }
                    }
                  },
                  "startTime": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Start time for the ad set"
                  },
                  "status": {
                    "type": "string",
                    "description": "Status of the ad set"
                  },
                  "assistantId": {
                    "type": "string",
                    "description": "ID of the assistant"
                  },
                  "adAccountId": {
                    "type": "string",
                    "description": "ID of the associated ad account"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ad set created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates whether the operation was successful"
                    },
                    "adSet": {
                      "$ref": "#/components/schemas/adSet"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error Message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "description": "Error Message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/fetch-meta-ad-creative": {
      "post": {
        "description": "Fetch Meta Ad Creatives",
        "requestBody": {
          "description": "Fetch Meta Ad Creatives for a specific assistant and ad account",
          "content": {
            "application/json": {
              "schema": {
                "required": ["adAccountId", "assistantId"],
                "type": "object",
                "properties": {
                  "adAccountId": {
                    "type": "string",
                    "description": "ID of the ad account"
                  },
                  "assistantId": {
                    "type": "string",
                    "description": "ID of the assistant"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Meta Ad Creatives fetched successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates whether the operation was successful"
                    },
                    "adCreative": {
                      "$ref": "#/components/schemas/adCreative"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error Message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "description": "Error Message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/create-meta-ad-creative": {
      "post": {
        "description": "Create a new Meta Ad Creative",
        "requestBody": {
          "description": "Create a new Meta Ad Creative",
          "content": {
            "application/json": {
              "schema": {
                "required": [
                  "fileUrl",
                  "name",
                  "assistantId",
                  "adAccountId",
                  "message"
                ],
                "type": "object",
                "properties": {
                  "fileUrl": {
                    "type": "string",
                    "description": "URL of the file to be used in the ad creative"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the ad creative"
                  },
                  "assistantId": {
                    "type": "string",
                    "description": "ID of the assistant"
                  },
                  "adAccountId": {
                    "type": "string",
                    "description": "ID of the ad account"
                  },
                  "message": {
                    "type": "string",
                    "description": "Message to be included in the ad creative"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Meta Ad Creative created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "adCreative": {
                      "$ref": "#/components/schemas/adCreative"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error Message"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "description": "Error Message"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/create-meta-ad": {
      "post": {
        "description": "Create a new meta ad.",
        "requestBody": {
          "description": "Data required to create a new meta ad.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "adName",
                  "adAccountId",
                  "assistantId",
                  "dailyBudget",
                  "geoLocation",
                  "minAge",
                  "maxAge",
                  "selectedPlatforms"
                ],
                "properties": {
                  "adId": {
                    "type": "string",
                    "description": "The MongoDB ID of the ad if updating an existing ad.",
                    "example": "67af017d518c2d0bccdde075"
                  },
                  "adDescription": {
                    "type": "string",
                    "description": "Description of the ad.",
                    "example": "Promote our WhatsApp Broadcast Service"
                  },
                  "adName": {
                    "type": "string",
                    "description": "Name of the ad.",
                    "example": "WhatsApp Broadcast Promotion"
                  },
                  "imageUrl": {
                    "type": "string",
                    "format": "url",
                    "description": "URL of the ad image.",
                    "example": "https://example.com/image.jpg"
                  },
                  "adAccountId": {
                    "type": "string",
                    "description": "The ID of the ad account.",
                    "example": "act_1118112209996269"
                  },
                  "assistantId": {
                    "type": "string",
                    "description": "The ID of the assistant.",
                    "example": "6740327c7efe1a58cc6e633e"
                  },
                  "assistantName": {
                    "type": "string",
                    "description": "Name of the assistant.",
                    "example": "MarketingBot"
                  },
                  "gender": {
                    "type": "string",
                    "description": "Gender target for the ad.",
                    "enum": ["MALE", "FEMALE", "ALL"],
                    "example": "ALL"
                  },
                  "geoLocation": {
                    "type": "object",
                    "description": "Geolocation settings for the ad.",
                    "example": {
                      "countries": ["IN"],
                      "cities": [
                        {
                          "country": "IN",
                          "key": "1019786",
                          "name": "Bhubaneswar",
                          "radius": 40
                        }
                      ]
                    }
                  },
                  "maxAge": {
                    "type": "integer",
                    "description": "Maximum age of the target audience.",
                    "example": 65
                  },
                  "minAge": {
                    "type": "integer",
                    "description": "Minimum age of the target audience.",
                    "example": 18
                  },
                  "headline": {
                    "type": "string",
                    "description": "Headline for the ad.",
                    "example": "Get Started with WhatsApp Broadcast"
                  },
                  "videoUrl": {
                    "type": "string",
                    "format": "url",
                    "description": "URL of the video to use in the ad (if applicable).",
                    "example": "https://example.com/video.mp4"
                  },
                  "advanceTargets": {
                    "type": "object",
                    "description": "Advanced targeting options.",
                    "example": {
                      "education_statuses": [
                        { "id": "2", "name": "College Graduate" }
                      ]
                    }
                  },
                  "dailyBudget": {
                    "type": "integer",
                    "description": "Daily budget for the ad (in smallest currency unit).",
                    "example": 50000
                  },
                  "adStartDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Start date and time for the ad.",
                    "example": "2025-02-20T08:00:00.000Z"
                  },
                  "adStopDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Stop date and time for the ad.",
                    "example": "2025-03-01T08:00:00.000Z"
                  },
                  "selectedPlatforms": {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "Platforms where the ad should be displayed.",
                    "example": ["facebook", "instagram"]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Meta ad created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/edit-meta-ad": {
      "post": {
        "description": "Edit an existing meta ad.",
        "requestBody": {
          "description": "Data required to edit a meta ad.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "adId",
                  "assistantId",
                  "dailyBudget",
                  "geoLocation",
                  "minAge",
                  "maxAge",
                  "selectedPlatforms"
                ],
                "properties": {
                  "adId": {
                    "type": "string",
                    "description": "The ID of the ad to be edited.",
                    "example": "67af017d518c2d0bccdde075"
                  },
                  "assistantId": {
                    "type": "string",
                    "description": "The ID of the assistant.",
                    "example": "6740327c7efe1a58cc6e633e"
                  },
                  "dailyBudget": {
                    "type": "integer",
                    "description": "New daily budget for the ad (in smallest currency unit).",
                    "example": 20000
                  },
                  "adStopDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "New stop date and time for the ad.",
                    "example": "2025-03-01T08:40:07.000Z"
                  },
                  "selectedPlatforms": {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "Platforms to run the ad on.",
                    "example": ["facebook", "instagram"]
                  },
                  "minAge": {
                    "type": "integer",
                    "description": "Minimum age for the target audience.",
                    "example": 18
                  },
                  "maxAge": {
                    "type": "integer",
                    "description": "Maximum age for the target audience.",
                    "example": 65
                  },
                  "gender": {
                    "type": "string",
                    "description": "Gender target for the ad.",
                    "enum": ["MALE", "FEMALE", "ALL"],
                    "example": "ALL"
                  },
                  "geoLocation": {
                    "type": "object",
                    "description": "Updated geolocation settings.",
                    "example": {
                      "countries": ["IN"],
                      "cities": [
                        {
                          "country": "IN",
                          "key": "1019786",
                          "name": "Bhubaneswar",
                          "radius": 40
                        }
                      ]
                    }
                  },
                  "advanceTargets": {
                    "type": "object",
                    "description": "Additional advanced targeting settings.",
                    "example": {
                      "education_statuses": [
                        { "id": "2", "name": "College Graduate" }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Meta ad edited successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/create-draft-meta-ad": {
      "post": {
        "description": "Create a new draft meta ad.",
        "requestBody": {
          "description": "Data required to create a draft meta ad.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "assistantId",
                  "adName",
                  "adDescription",
                  "dailyBudget",
                  "geoLocation",
                  "minAge",
                  "maxAge",
                  "platforms"
                ],
                "properties": {
                  "assistantId": {
                    "type": "string",
                    "description": "The ID of the assistant.",
                    "example": "6740327c7efe1a58cc6e633e"
                  },
                  "adName": {
                    "type": "string",
                    "description": "Name of the draft ad.",
                    "example": "Send WhatsApp Broadcast Officially"
                  },
                  "adDescription": {
                    "type": "string",
                    "description": "Description of the draft ad.",
                    "example": "Send WhatsApp Broadcast Officially"
                  },
                  "headline": {
                    "type": "string",
                    "description": "Headline for the draft ad.",
                    "example": "Best Messaging Service"
                  },
                  "imageUrl": {
                    "type": "string",
                    "description": "URL of the image for the ad.",
                    "example": "https://example.com/image.png"
                  },
                  "videoUrl": {
                    "type": "string",
                    "description": "URL of the video for the ad.",
                    "example": "https://example.com/video.mp4"
                  },
                  "dailyBudget": {
                    "type": "integer",
                    "description": "Daily budget for the ad (in smallest currency unit).",
                    "example": 15000
                  },
                  "geoLocation": {
                    "type": "object",
                    "description": "Target geolocation settings.",
                    "example": {
                      "countries": ["IN"],
                      "cities": [
                        {
                          "country": "IN",
                          "key": "2678292",
                          "name": "Noida",
                          "radius": 40
                        }
                      ]
                    }
                  },
                  "minAge": {
                    "type": "integer",
                    "description": "Minimum age for the target audience.",
                    "example": 18
                  },
                  "maxAge": {
                    "type": "integer",
                    "description": "Maximum age for the target audience.",
                    "example": 65
                  },
                  "gender": {
                    "type": "string",
                    "description": "Gender target for the ad.",
                    "enum": ["MALE", "FEMALE", "ALL"],
                    "example": "ALL"
                  },
                  "platforms": {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "List of platforms to target.",
                    "example": ["facebook", "instagram"]
                  },
                  "adStartDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Start date and time for the ad.",
                    "example": "2025-02-14T08:40:06.000Z"
                  },
                  "adStopDate": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Stop date and time for the ad.",
                    "example": "2025-02-16T08:40:07.000Z"
                  },
                  "duration": {
                    "type": "string",
                    "description": "Duration of the ad in days.",
                    "example": "2.00"
                  },
                  "advanceTargets": {
                    "type": "object",
                    "description": "Additional targeting parameters.",
                    "example": {
                      "education_statuses": [
                        { "id": "1", "name": "High School" }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Draft meta ad created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/adData"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    },
                    "name": {
                      "type": "string",
                      "example": "ValidationError"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/fetch-draft-meta-ad": {
      "post": {
        "description": "Fetches draft meta ads for the specified assistant.",
        "requestBody": {
          "description": "Details to fetch draft meta ads.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "assistantId": {
                    "type": "string",
                    "description": "The ID of the assistant."
                  },
                  "adId": {
                    "type": "string",
                    "description": "Optional: The ID of the draft ad to fetch."
                  }
                },
                "required": ["assistantId"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Draft meta ads fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "_id": {
                      "type": "string",
                      "example": "67af017d518c2d0bccdde075"
                    },
                    "assistantId": {
                      "type": "string",
                      "example": "6740327c7efe1a58cc6e633e"
                    },
                    "clientId": {
                      "type": "string",
                      "example": "6740327c7efe1a58cc6e6339"
                    },
                    "adName": {
                      "type": "string",
                      "example": "Sample Draft Ad"
                    },
                    "adDescription": {
                      "type": "string",
                      "example": "This is a draft ad description."
                    },
                    "headline": {
                      "type": "string",
                      "example": "Draft Ad Headline"
                    },
                    "imageUrl": {
                      "type": "string",
                      "example": "https://example.com/image.png"
                    },
                    "videoUrl": {
                      "type": "string",
                      "example": "https://example.com/video.mp4"
                    },
                    "dailyBudget": {
                      "type": "string",
                      "example": "15000"
                    },
                    "minAge": {
                      "type": "integer",
                      "example": 18
                    },
                    "maxAge": {
                      "type": "integer",
                      "example": 65
                    },
                    "geoLocation": {
                      "type": "object",
                      "example": {
                        "countries": ["IN"],
                        "cities": [
                          {
                            "country": "IN",
                            "key": "2678292",
                            "name": "Noida",
                            "radius": 40
                          }
                        ]
                      }
                    },
                    "gender": {
                      "type": "string",
                      "example": "ALL"
                    },
                    "platforms": {
                      "type": "array",
                      "items": { "type": "string" },
                      "example": ["facebook"]
                    },
                    "adStartDate": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2025-02-14T08:40:06.000Z"
                    },
                    "adStopDate": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2025-02-16T08:40:07.000Z"
                    },
                    "adStatus": {
                      "type": "string",
                      "example": "DRAFT"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2025-02-14T08:40:29.844Z"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2025-02-18T18:36:28.258Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "Invalid request parameters"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "Internal server error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/get-delivery-estimate-result": {
      "post": {
        "description": "Retrieve delivery estimates for an ad targeting specification.",
        "requestBody": {
          "description": "Parameters to get delivery estimates",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "adAccountId": {
                    "type": "string",
                    "example": "act_1118112209996269",
                    "description": "The ID of the ad account for which delivery estimates are to be retrieved."
                  },
                  "minAge": {
                    "type": "integer",
                    "example": 18,
                    "description": "Minimum age for the targeted audience."
                  },
                  "maxAge": {
                    "type": "integer",
                    "example": 65,
                    "description": "Maximum age for the targeted audience."
                  },
                  "gender": {
                    "type": "string",
                    "enum": ["male", "female", "ALL"],
                    "example": "ALL",
                    "description": "Gender targeting for the ad."
                  },
                  "geoLocation": {
                    "type": "object",
                    "properties": {
                      "countries": {
                        "type": "array",
                        "items": { "type": "string" },
                        "example": [],
                        "description": "List of country codes for targeting."
                      },
                      "cities": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": { "type": "string", "example": "city" },
                            "country_code": {
                              "type": "string",
                              "example": "IN"
                            },
                            "region_id": { "type": "integer", "example": 1740 },
                            "key": { "type": "string", "example": "1019786" },
                            "name": {
                              "type": "string",
                              "example": "Bhubaneswar"
                            },
                            "region": { "type": "string", "example": "Odisha" },
                            "country_name": {
                              "type": "string",
                              "example": "India"
                            },
                            "radius": { "type": "integer", "example": 40 },
                            "distance_unit": {
                              "type": "string",
                              "example": "kilometer"
                            }
                          }
                        },
                        "description": "List of cities for geo-targeting."
                      },
                      "regions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": { "type": "string" },
                            "name": { "type": "string" }
                          }
                        },
                        "description": "List of regions for geo-targeting."
                      },
                      "places": {
                        "type": "array",
                        "items": { "type": "object" },
                        "example": [],
                        "description": "List of specific places for geo-targeting."
                      }
                    }
                  },
                  "selectedPlatforms": {
                    "type": "array",
                    "items": { "type": "string" },
                    "example": [],
                    "description": "List of platforms to target, e.g., ['facebook', 'instagram']."
                  },
                  "advanceTargets": {
                    "type": "object",
                    "example": {},
                    "description": "Additional targeting options such as education statuses and relationship statuses."
                  },
                  "assistantId": {
                    "type": "string",
                    "example": "6740327c7efe1a58cc6e633e",
                    "description": "The ID of the assistant requesting the estimate."
                  }
                },
                "required": [
                  "adAccountId",
                  "minAge",
                  "maxAge",
                  "geoLocation",
                  "assistantId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Delivery estimate results.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "object",
                      "properties": {
                        "daily_outcomes_curve": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "spend": { "type": "number", "example": 0 },
                              "reach": { "type": "integer", "example": 0 },
                              "impressions": {
                                "type": "integer",
                                "example": 0
                              },
                              "actions": { "type": "integer", "example": 0 }
                            }
                          }
                        },
                        "estimate_dau": {
                          "type": "integer",
                          "example": 3158946,
                          "description": "Estimated daily active users."
                        },
                        "estimate_mau_lower_bound": {
                          "type": "integer",
                          "example": 4000000,
                          "description": "Estimated monthly active users (lower bound)."
                        },
                        "estimate_mau_upper_bound": {
                          "type": "integer",
                          "example": 4700000,
                          "description": "Estimated monthly active users (upper bound)."
                        },
                        "estimate_ready": {
                          "type": "boolean",
                          "example": true,
                          "description": "Indicates if the estimate is ready."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": { "type": "integer", "example": 400 },
                    "name": {
                      "type": "string",
                      "example": "Meta Estimate Error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid Parameters"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error while retrieving delivery estimates.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unable to estimate"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/meta-ads/export-ad-data-new": {
      "post": {
        "summary": "Export Ad Data",
        "description": "Exports ad data for a given assistant within a specified date range.",
        "requestBody": {
          "description": "Request payload for exporting ad data",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "fromAdStartDate": {
                    "type": "string",
                    "format": "date",
                    "example": "2025-02-01",
                    "description": "Start date for the export range."
                  },
                  "toAdStartDate": {
                    "type": "string",
                    "format": "date",
                    "example": "2025-02-28",
                    "description": "End date for the export range."
                  },
                  "assistantId": {
                    "type": "string",
                    "example": "6740327c7efe1a58cc6e633e",
                    "description": "ID of the assistant whose ad data is being exported."
                  },
                  "timezone": {
                    "type": "string",
                    "example": "Asia/Kolkata",
                    "description": "Timezone to be used for date formatting."
                  }
                },
                "required": [
                  "fromAdStartDate",
                  "toAdStartDate",
                  "assistantId",
                  "timezone"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ad data successfully exported as a CSV file",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string",
                  "example": "Ad Name,Gender,Daily Budget,Age Group,Created At,..."
                }
              }
            }
          },
          "400": {
            "description": "Invalid input parameters",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "The date range should not exceed 3 month."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "errorMessage": {
                      "type": "string",
                      "example": "An error occurred while exporting the ad data."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/meta-ads/create-page": {
      "post": {
        "description": "Creates a new Meta page for the specified assistant",
        "requestBody": {
          "description": "Meta page creation details",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "clientId": {
                    "type": "string",
                    "description": "Unique identifier for the client"
                  },
                  "assistantId": {
                    "type": "string",
                    "description": "ID of the assistant"
                  },
                  "pageName": {
                    "type": "string",
                    "description": "Name of the new page"
                  },
                  "pageDescription": {
                    "type": "string",
                    "description": "Description of the new page"
                  },
                  "profilePhotoUrl": {
                    "type": "string",
                    "description": "URL for the profile photo"
                  },
                  "coverPhotoUrl": {
                    "type": "string",
                    "description": "URL for the cover photo"
                  }
                },
                "required": [
                  "assistantId",
                  "pageName",
                  "pageDescription",
                  "profilePhotoUrl",
                  "coverPhotoUrl"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Page created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the operation was successful"
                    },
                    "pageObj": {
                      "type": "object",
                      "description": "Details of the created page",
                      "properties": {
                        "pageId": { "type": "string" },
                        "pageName": { "type": "string" },
                        "whatsappNumber": { "type": "string" },
                        "status": { "type": "string" }
                      }
                    },
                    "message": {
                      "type": "string",
                      "description": "Success message"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "FbConnect": {
        "required": ["assistantId", "authResponse", "status", "agentId"],
        "type": "object",
        "properties": {
          "assistantId": {
            "$ref": "#/components/schemas/assistantId"
          },
          "authResponse": {
            "$ref": "#/components/schemas/authResponse"
          },
          "status": {
            "type": "string",
            "description": "FB Login Status of"
          },
          "partnerId": {
            "type": "string",
            "description": "Partner Id associated with Project (If present)"
          },
          "agentId": {
            "type": "string",
            "description": "Agent ID associated with the project"
          }
        }
      },
      "FbConnectResponse": {
        "required": ["status", "assistantData"],
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Reprsenting a successfully api operation"
          },
          "assistantData": {
            "$ref": "#/components/schemas/assistantData"
          }
        }
      },
      "FbDisconnect": {
        "required": ["assistantId", "fbUserId", "partnerId"],
        "type": "object",
        "properties": {
          "assistantId": {
            "$ref": "#/components/schemas/assistantId"
          },
          "partnerId": {
            "type": "string",
            "description": "Partner Id associated with Project (If present)"
          },
          "fbUserId": {
            "type": "string",
            "description": "FB User ID with which user is logged in Ads Manager"
          }
        }
      },
      "assistantId": {
        "description": "Project Id of the user",
        "type": "string"
      },

      "assistantData": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the assistant"
          },
          "appName": {
            "type": "string",
            "description": "Name of the application"
          },
          "assistantName": {
            "type": "string",
            "description": "Name of the assistant"
          },
          "clientId": {
            "type": "string",
            "description": "ID of the client associated with the assistant"
          },
          "whatsappNumber": {
            "type": "string",
            "description": "WhatsApp number associated with the assistant"
          },
          "metaAdsCredit": {
            "type": "number",
            "description": "Meta Ads credit balance"
          },
          "selectedMetaAdAccountId": {
            "type": "string",
            "description": "Selected Meta Ad Account ID"
          },
          "selectedMetaPageId": {
            "type": "string",
            "description": "Selected Meta Page ID"
          },
          "adSetupDetails": {
            "type": "object",
            "properties": {
              "isSetupCompleted": {
                "type": "boolean",
                "description": "Indicates if the ad setup is completed"
              },
              "claimedFreeAdCredit": {
                "type": "boolean",
                "description": "Indicates if the free ad credit has been claimed"
              },
              "selectedMetaPageId": {
                "type": "string",
                "description": "Selected Meta Page ID"
              },
              "selectedMetaAdAccountId": {
                "type": "string",
                "description": "Selected Meta Ad Account ID"
              }
            }
          },
          "country": {
            "type": "string",
            "description": "Country of the assistant"
          },
          "currency": {
            "type": "string",
            "description": "Currency used for billing"
          },
          "subscriptionStatus": {
            "type": "string",
            "description": "Subscription status of the assistant"
          },
          "subscriptionName": {
            "type": "string",
            "description": "Name of the current subscription plan"
          },
          "fbConnected": {
            "type": "boolean",
            "description": "Indicates if the assistant is connected to Facebook"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the assistant was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the assistant was last updated"
          }
        }
      },

      "adAccountData": {
        "type": "object",
        "properties": {
          "_id": { "type": "string" },
          "tasks": { "type": "array", "items": {} },
          "impressions": { "type": "string" },
          "spend": { "type": "string" },
          "averageDailySpend": { "type": "string" },
          "clicks": { "type": "string" },
          "reach": { "type": "string" },
          "uniqueClicks": { "type": "string" },
          "messageSentCount": { "type": "integer" },
          "totalLeadsGenerated": { "type": "integer" },
          "newLeadsGenerated": { "type": "integer" },
          "isChildBMAdAccount": { "type": "boolean" },
          "clientId": { "type": "string" },
          "assistantId": { "type": "string" },
          "metaBusinessId": { "type": "string" },
          "metaBusinessName": { "type": "string" },
          "accountId": { "type": "string" },
          "accountName": { "type": "string" },
          "accountStatus": { "type": "string" },
          "amountSpent": { "type": "string" },
          "balance": { "type": "string" },
          "currency": { "type": "string" },
          "isPrepayAccount": { "type": "boolean" },
          "minAdSpend": { "type": "string" },
          "minDailyBudget": { "type": "integer" },
          "fundingSource": {
            "type": "object",
            "properties": {
              "id": { "type": "string" }
            }
          },
          "disableReason": { "type": "string" },
          "accountAge": { "type": "string" },
          "isAssigned": { "type": "boolean" },
          "status": { "type": "string" },
          "owner": { "type": "string" },
          "timezone": { "type": "string" },
          "accountCreatedAt": { "type": "string", "format": "date-time" },
          "createdAt": { "type": "string", "format": "date-time" },
          "updatedAt": { "type": "string", "format": "date-time" },
          "__v": { "type": "integer" }
        }
      },

      "adData": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the ad."
          },
          "callToAction": {
            "type": "string",
            "description": "The call-to-action for the ad."
          },
          "adCampaignObjective": {
            "type": "string",
            "description": "The objective of the ad campaign."
          },
          "buyingType": {
            "type": "string",
            "description": "Buying type for the ad."
          },
          "bidStrategy": {
            "type": "string",
            "description": "Bidding strategy."
          },
          "optimizationGoal": {
            "type": "string",
            "description": "Optimization goal for the ad."
          },
          "billingEvent": {
            "type": "string",
            "description": "Billing event for the ad."
          },
          "gender": { "type": "string", "description": "Targeted gender." },
          "platforms": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Platforms where the ad is displayed."
          },
          "destinationType": {
            "type": "string",
            "description": "Destination type."
          },
          "audienceId": { "type": "string", "description": "Audience ID." },
          "type": { "type": "string", "description": "Type of ad." },
          "adStatus": {
            "type": "string",
            "description": "Current status of the ad."
          },
          "adIssues": {
            "type": "string",
            "nullable": true,
            "description": "Issues related to the ad."
          },
          "totalBudget": {
            "type": "string",
            "description": "Total budget allocated."
          },
          "impressions": {
            "type": "string",
            "description": "Number of impressions."
          },
          "spend": {
            "type": "string",
            "description": "Total spend on the ad."
          },
          "clicks": { "type": "string", "description": "Number of clicks." },
          "reach": { "type": "string", "description": "Reach of the ad." },
          "uniqueClicks": {
            "type": "string",
            "description": "Number of unique clicks."
          },
          "totalMessages": {
            "type": "string",
            "description": "Total messages received."
          },
          "messageSentCount": {
            "type": "integer",
            "description": "Number of messages sent."
          },
          "totalLeadsGenerated": {
            "type": "integer",
            "description": "Total leads generated."
          },
          "newLeadsGenerated": {
            "type": "integer",
            "description": "New leads generated."
          },
          "source": { "type": "string", "description": "Source of the ad." },
          "isChildBMAd": {
            "type": "boolean",
            "description": "Flag indicating if it's a child BM ad."
          },
          "engagementRateRanking": {
            "type": "string",
            "nullable": true,
            "description": "Engagement rate ranking."
          },
          "qualityRanking": {
            "type": "string",
            "nullable": true,
            "description": "Quality ranking."
          },
          "actions": {
            "type": "array",
            "items": { "type": "object" },
            "description": "Actions associated with the ad."
          },
          "clientId": { "type": "string", "description": "Client ID." },
          "adCampaignId": {
            "type": "string",
            "description": "Ad campaign ID."
          },
          "adSetId": { "type": "string", "description": "Ad set ID." },
          "dailyBudget": {
            "type": "string",
            "description": "Daily budget for the ad."
          },
          "geoLocation": {
            "type": "object",
            "description": "Geographical targeting details.",
            "properties": {
              "cities": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "country": { "type": "string" },
                    "distance_unit": { "type": "string" },
                    "key": { "type": "string" },
                    "name": { "type": "string" },
                    "radius": { "type": "integer" },
                    "region": { "type": "string" },
                    "region_id": { "type": "string" },
                    "country_name": { "type": "string" },
                    "type": { "type": "string" }
                  }
                }
              },
              "location_types": {
                "type": "array",
                "items": { "type": "string" }
              }
            }
          },
          "minAge": { "type": "string", "description": "Minimum age target." },
          "maxAge": { "type": "string", "description": "Maximum age target." },
          "adStopDate": {
            "type": "string",
            "format": "date-time",
            "description": "Stop date of the ad."
          },
          "assistantId": { "type": "string", "description": "Assistant ID." },
          "adAccountId": { "type": "string", "description": "Ad account ID." },
          "metaBusinessId": {
            "type": "string",
            "description": "Meta business ID."
          },
          "metaPageId": { "type": "string", "description": "Meta page ID." },
          "adCreativeId": {
            "type": "string",
            "description": "Ad creative ID."
          },
          "adDescription": {
            "type": "string",
            "description": "Description of the ad."
          },
          "imageUrl": {
            "type": "string",
            "format": "uri",
            "description": "URL of the ad image."
          },
          "videoUrl": {
            "type": "string",
            "format": "uri",
            "description": "URL of the ad video."
          },
          "adName": { "type": "string", "description": "Name of the ad." },
          "adId": { "type": "string", "description": "Unique ID of the ad." },
          "adEffectiveStatus": {
            "type": "string",
            "description": "Effective status of the ad."
          },
          "previewLink": {
            "type": "string",
            "format": "uri",
            "description": "Preview link for the ad."
          },
          "linkTitle": {
            "type": "string",
            "description": "Title of the link."
          },
          "linkDescription": {
            "type": "string",
            "description": "Description of the link."
          },
          "linkImage": {
            "type": "string",
            "format": "uri",
            "description": "Image URL for the link."
          },
          "duration": {
            "type": "string",
            "description": "Duration of the ad."
          },
          "advanceTargets": {
            "type": "object",
            "description": "Advanced targeting details."
          },
          "metaVideoId": { "type": "string", "description": "Meta video ID." },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp."
          },
          "adStartDate": {
            "type": "string",
            "format": "date-time",
            "description": "Start date of the ad."
          },
          "bidAmount": {
            "type": "string",
            "nullable": true,
            "description": "Bid amount if applicable."
          },
          "budgetRemaining": {
            "type": "string",
            "description": "Remaining budget."
          },
          "displayLink": {
            "type": "string",
            "nullable": true,
            "description": "Display link for the ad."
          },
          "headline": {
            "type": "string",
            "nullable": true,
            "description": "Ad headline."
          },
          "headlineDescription": {
            "type": "string",
            "description": "Description of the headline."
          },
          "placementTargets": {
            "type": "object",
            "description": "Placement targets for the ad.",
            "properties": {
              "device_platforms": {
                "type": "array",
                "items": { "type": "string" }
              },
              "publisher_platforms": {
                "type": "array",
                "items": { "type": "string" }
              },
              "facebook_positions": {
                "type": "array",
                "items": { "type": "string" }
              },
              "audience_network_positions": {
                "type": "array",
                "items": { "type": "string" }
              },
              "instagram_positions": {
                "type": "array",
                "items": { "type": "string" }
              },
              "messenger_positions": {
                "type": "array",
                "items": { "type": "string" }
              }
            }
          },
          "targetingOptimization": {
            "type": "string",
            "nullable": true,
            "description": "Optimization strategy for targeting."
          }
        }
      },
      "adCreative": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "MongoDB ObjectId"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates if the creative is deleted"
          },
          "assistantId": {
            "type": "string",
            "description": "ID of the assistant"
          },
          "clientId": {
            "type": "string",
            "description": "ID of the client"
          },
          "name": {
            "type": "string",
            "description": "Name of the ad creative"
          },
          "objectStorySpec": {
            "type": "object",
            "properties": {
              "page_id": {
                "type": "string",
                "description": "ID of the page"
              },
              "link_data": {
                "type": "object",
                "properties": {
                  "link": {
                    "type": "string",
                    "description": "URL link for the ad"
                  },
                  "message": {
                    "type": "string",
                    "description": "Message for the ad"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name for the ad"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description for the ad"
                  },
                  "image_hash": {
                    "type": "string",
                    "description": "Hash of the image used in the ad"
                  },
                  "call_to_action": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Type of the call to action"
                      },
                      "value": {
                        "type": "object",
                        "properties": {
                          "app_destination": {
                            "type": "string",
                            "description": "Destination for the call to action"
                          }
                        }
                      }
                    }
                  },
                  "picture": {
                    "type": "string",
                    "description": "URL of the picture used in the ad"
                  }
                }
              }
            }
          },
          "adAccountId": {
            "type": "string",
            "description": "ID of the ad account"
          },
          "fileUrl": {
            "type": "string",
            "description": "URL of the file used in the ad"
          },
          "adCreativityId": {
            "type": "string",
            "description": "ID of the ad creative"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the ad creative was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the ad creative was last updated"
          }
        }
      },
      "adSet": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the ad set"
          },
          "bidAmount": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "Bid amounts associated with the ad set"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates if the ad set is deleted"
          },
          "assistantId": {
            "type": "string",
            "description": "ID of the assistant associated with the ad set"
          },
          "clientId": {
            "type": "string",
            "description": "ID of the client associated with the ad set"
          },
          "name": {
            "type": "string",
            "description": "Name of the ad set"
          },
          "optimizationGoal": {
            "type": "string",
            "description": "Optimization goal for the ad set"
          },
          "billingEvent": {
            "type": "string",
            "description": "Billing event type for the ad set"
          },
          "dailyBudget": {
            "type": "string",
            "description": "Daily budget for the ad set"
          },
          "adCampaignId": {
            "type": "string",
            "description": "ID of the campaign associated with the ad set"
          },
          "targeting": {
            "type": "object",
            "properties": {
              "age_min": {
                "type": "integer",
                "description": "Minimum age for targeting"
              },
              "age_max": {
                "type": "integer",
                "description": "Maximum age for targeting"
              },
              "genders": {
                "type": "array",
                "items": {
                  "type": "integer"
                },
                "description": "Genders targeted"
              },
              "geo_locations": {
                "type": "object",
                "properties": {
                  "countries": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of countries to target"
                  },
                  "cities": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "name": { "type": "string" }
                      }
                    },
                    "description": "List of cities to target"
                  },
                  "regions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of regions to target"
                  }
                }
              },
              "flexible_spec": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "interests": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" }
                        }
                      },
                      "description": "Interest-based targeting"
                    },
                    "work_employers": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": { "type": "string" }
                        }
                      },
                      "description": "Employer-based targeting"
                    }
                  }
                },
                "description": "Flexible targeting specifications"
              }
            }
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "description": "End time of the ad set"
          },
          "status": {
            "type": "string",
            "description": "Status of the ad set"
          },
          "adAccountId": {
            "type": "string",
            "description": "ID of the associated ad account"
          },
          "adSetId": {
            "type": "string",
            "description": "Unique ID of the ad set"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the ad set was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the ad set was last updated"
          }
        }
      },
      "adCampaign": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier of the ad campaign."
          },
          "specialAdCategories": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Special categories for the ad campaign, if any."
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates if the ad campaign is deleted."
          },
          "assistantId": {
            "type": "string",
            "description": "ID of the assistant associated with the ad campaign."
          },
          "clientId": {
            "type": "string",
            "description": "ID of the client associated with the ad campaign."
          },
          "name": {
            "type": "string",
            "description": "Name of the ad campaign."
          },
          "objective": {
            "type": "string",
            "description": "Objective of the ad campaign."
          },
          "status": {
            "type": "string",
            "description": "Current status of the ad campaign."
          },
          "adCampaignId": {
            "type": "string",
            "description": "Facebook ad campaign ID."
          },
          "adAccountId": {
            "type": "string",
            "description": "Facebook ad account ID."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the ad campaign was created."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the ad campaign was last updated."
          }
        },
        "example": {
          "_id": "67739f8003bb350be11511a2",
          "specialAdCategories": [],
          "isDeleted": false,
          "assistantId": "6740327c7efe1a58cc6e633e",
          "clientId": "6740327c7efe1a58cc6e6339",
          "name": "Demo Ad Campaign",
          "objective": "OUTCOME_ENGAGEMENT",
          "status": "ACTIVE",
          "adCampaignId": "120216039543220312",
          "adAccountId": "act_588522550787541",
          "createdAt": "2024-12-31T07:38:40.711Z",
          "updatedAt": "2024-12-31T07:38:40.711Z"
        }
      },
      "adAccount": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the ad account"
          },
          "accountId": {
            "type": "string",
            "description": "Meta account ID"
          },
          "assistantId": {
            "type": "string",
            "description": "Assistant ID linked to the ad account"
          },
          "accountAge": {
            "type": "string",
            "description": "Age of the ad account in days"
          },
          "accountCreatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the ad account"
          },
          "accountName": {
            "type": "string",
            "description": "Name of the ad account"
          },
          "accountStatus": {
            "type": "string",
            "description": "Status of the ad account"
          },
          "amountSpent": {
            "type": "string",
            "description": "Total amount spent on the ad account"
          },
          "balance": {
            "type": "string",
            "description": "Current balance of the ad account"
          },
          "clientId": {
            "type": "string",
            "description": "Client ID linked to the ad account"
          },
          "currency": {
            "type": "string",
            "description": "Currency code for the ad account"
          },
          "disableReason": {
            "type": "string",
            "description": "Reason the account was disabled if applicable"
          },
          "fundingSource": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "ID of the funding source"
              }
            }
          },
          "isAssigned": {
            "type": "boolean",
            "description": "Indicates if the ad account is assigned to a campaign"
          },
          "isPrepayAccount": {
            "type": "boolean",
            "description": "Indicates if the ad account is a prepay account"
          },
          "metaBusinessId": {
            "type": "string",
            "description": "ID of the associated Meta Business"
          },
          "metaBusinessName": {
            "type": "string",
            "description": "Name of the associated Meta Business"
          },
          "minAdSpend": {
            "type": "string",
            "description": "Minimum ad spend for the account"
          },
          "minDailyBudget": {
            "type": "integer",
            "description": "Minimum daily budget for the account"
          },
          "owner": {
            "type": "string",
            "description": "Owner ID of the ad account"
          },
          "status": {
            "type": "string",
            "description": "Current status of the ad account"
          },
          "systemUserId": {
            "type": "string",
            "description": "ID of the system user associated with the account"
          },
          "systemUserToken": {
            "type": "string",
            "description": "Access token for the system user"
          },
          "tasks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of tasks associated with the ad account"
          },
          "timezone": {
            "type": "string",
            "description": "Timezone of the ad account"
          },
          "averageDailySpend": {
            "type": "string",
            "description": "Average daily spend on the ad account"
          },
          "clicks": {
            "type": "string",
            "description": "Total clicks for the ad account"
          },
          "impressions": {
            "type": "string",
            "description": "Total impressions for the ad account"
          },
          "reach": {
            "type": "string",
            "description": "Total reach for the ad account"
          },
          "spend": {
            "type": "string",
            "description": "Total spend for the ad account"
          },
          "uniqueClicks": {
            "type": "string",
            "description": "Number of unique clicks"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the ad account was created"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the ad account was last updated"
          }
        }
      },
      "metaPage": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the Meta page"
          },
          "assistantId": {
            "type": "string",
            "description": "The ID of the assistant associated with the page"
          },
          "pageId": {
            "type": "string",
            "description": "The Meta page ID"
          },
          "pageName": {
            "type": "string",
            "description": "The name of the Meta page"
          },
          "adsDefaultIcebreakers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Default icebreakers for Messenger Ads"
          },
          "adsDefaultWelcomeMessage": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Default welcome messages for Messenger Ads"
          },
          "category": {
            "type": "string",
            "description": "The category of the Meta page"
          },
          "clientId": {
            "type": "string",
            "description": "The client ID associated with the page"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the page was created"
          },
          "hasWhatsappBusinessNumber": {
            "type": "boolean",
            "nullable": true,
            "description": "Indicates if the page has a WhatsApp Business number"
          },
          "isAssigned": {
            "type": "boolean",
            "description": "Indicates if the page is assigned to an assistant"
          },
          "isPublished": {
            "type": "boolean",
            "description": "Indicates if the page is published"
          },
          "metaBusinessId": {
            "type": "string",
            "description": "The ID of the Meta Business associated with the page"
          },
          "metaBusinessName": {
            "type": "string",
            "description": "The name of the Meta Business associated with the page"
          },
          "pageAccessToken": {
            "type": "string",
            "description": "Access token for the Meta page"
          },
          "picture": {
            "type": "string",
            "format": "uri",
            "description": "URL of the page's profile picture"
          },
          "status": {
            "type": "string",
            "enum": ["active", "deleted"],
            "description": "Status of the Meta page"
          },
          "systemUserId": {
            "type": "string",
            "description": "The ID of the system user associated with the page"
          },
          "systemUserToken": {
            "type": "string",
            "description": "Access token for the system user"
          },
          "tasks": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tasks associated with the Meta page"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the page was last updated"
          },
          "whatsappNumber": {
            "type": "string",
            "description": "WhatsApp number associated with the page"
          },
          "pageDescription": {
            "type": "string",
            "description": "Description of the Meta page"
          }
        }
      },
      "metaAdAnalytics": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier for the analytics record"
          },
          "leadType": {
            "type": "string",
            "description": "Type of the lead (e.g., 'new', 'existing')"
          },
          "adId": {
            "type": "string",
            "description": "Ad ID to which this analytics record belongs"
          },
          "adUrl": {
            "type": "string",
            "description": "URL of the ad"
          },
          "headline": {
            "type": "string",
            "description": "Headline for the ad"
          },
          "ctwa_clid": {
            "type": "string"
          },
          "mediaType": {
            "type": "string",
            "description": "Media type used in the ad (e.g., 'image', 'video')"
          },
          "imageUrl": {
            "type": "string",
            "description": "URL of the ad image, if any"
          },
          "assistantId": {
            "type": "string",
            "description": "ID of the assistant"
          },
          "clientId": {
            "type": "string",
            "description": "Client ID linked to this analytics record"
          },
          "userNumber": {
            "type": "string",
            "description": "User's WhatsApp phone number"
          },
          "userName": {
            "type": "string",
            "description": "Name of the user"
          },
          "userId": {
            "type": "string",
            "description": "Unique identifier for the user in the system"
          },
          "sentAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp indicating when the ad message was sent"
          },
          "adAccountId": {
            "type": "string",
            "description": "ID of the ad account associated with the ad"
          },
          "messages": {
            "type": "number",
            "description": "Number of messages exchanged"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Record creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Record last update timestamp"
          }
        }
      },
      "targetingSearchItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the targeting option"
          },
          "name": {
            "type": "string",
            "description": "Name or label of the targeting option"
          },
          "type": {
            "type": "string",
            "description": "Category of the targeting option (e.g., 'interests', 'education_statuses')"
          },
          "path": {
            "type": "array",
            "items": { "type": "string" },
            "description": "Hierarchical path describing where this targeting option fits"
          },
          "audience_size_lower_bound": {
            "type": "number",
            "description": "Estimated lower bound of the audience size"
          },
          "audience_size_upper_bound": {
            "type": "number",
            "description": "Estimated upper bound of the audience size"
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Additional descriptive text for certain targeting options"
          }
        }
      },
      "adGeoLocation": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Unique identifier for the location"
          },
          "name": {
            "type": "string",
            "description": "Display name of the location"
          },
          "type": {
            "type": "string",
            "description": "Location type (e.g. 'city', 'neighborhood', 'region', 'country', etc.)"
          },
          "country_code": {
            "type": "string",
            "description": "Country code for the location (e.g. 'IN', 'US')"
          },
          "country_name": {
            "type": "string",
            "description": "Full country name (e.g. 'India', 'United States')"
          },
          "region": {
            "type": "string",
            "description": "Region name if available (e.g. 'Punjab', 'California')"
          },
          "region_id": {
            "type": "integer",
            "description": "Identifier for the region if available"
          },
          "supports_region": {
            "type": "boolean",
            "description": "Indicates if the region level is supported"
          },
          "supports_city": {
            "type": "boolean",
            "description": "Indicates if the city level is supported"
          },
          "geo_hierarchy_level": {
            "type": "string",
            "nullable": true,
            "description": "Hierarchy level for the location (e.g. 'CITY', 'NEIGHBORHOOD')"
          },
          "geo_hierarchy_name": {
            "type": "string",
            "nullable": true,
            "description": "Description of the hierarchy level (e.g. 'CITY', 'NEIGHBORHOOD')"
          }
        }
      },
      "adIssue": {
        "type": "object",
        "properties": {
          "level": { "type": "string" },
          "error_code": { "type": "number" },
          "error_summary": { "type": "string" },
          "error_message": { "type": "string" },
          "error_type": { "type": "string" }
        }
      },
      "authResponse": {
        "required": ["accessToken", "userID", "grantedScopes"],
        "type": "object",
        "properties": {
          "accessToken": {
            "description": "Short lived token provided by meta",
            "type": "string"
          },
          "userID": {
            "description": "fb User Id of the user",
            "type": "string"
          },
          "grantedScopes": {
            "description": "Permissions granted in the short lived token",
            "type": "array",
            "items": { "type": "string" }
          }
        }
      },
      "cities": {
        "type": "object",
        "properties": {
          "country": { "type": "string" },
          "distance_unit": { "type": "string" },
          "key": { "type": "string" },
          "name": { "type": "string" },
          "radius": { "type": "number" },
          "region": { "type": "string" },
          "region_id": { "type": "string" },
          "country_name": { "type": "string" },
          "type": { "type": "string" }
        }
      },

      "Error": {
        "required": ["error", "message"],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
